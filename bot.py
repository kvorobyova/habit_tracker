import asyncio
import json
import logging
from datetime import datetime, time as dtime, timedelta
from typing import Set, Dict, List, Optional

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, CommandObject
from aiogram.client.default import DefaultBotProperties

from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncpg
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("BOT_TOKEN")
DB_URL = os.getenv("DB_URL")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
WEEK_DAYS = {
    'mon': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    'tue': '–í—Ç–æ—Ä–Ω–∏–∫',
    'wed': '–°—Ä–µ–¥–∞',
    'thu': '–ß–µ—Ç–≤–µ—Ä–≥',
    'fri': '–ü—è—Ç–Ω–∏—Ü–∞',
    'sat': '–°—É–±–±–æ—Ç–∞',
    'sun': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
    'everyday': '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å'
}

REMINDER_OPTIONS = {
    '1h': '–ó–∞ 1 —á–∞—Å',
    '3h': '–ó–∞ 3 —á–∞—Å–∞',
    '1d': '–ó–∞ 1 –¥–µ–Ω—å',
    'none': '–ë–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è'
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AddHabit(StatesGroup):
    name = State()
    time = State()
    days = State()
    reminders = State()

class EditHabit(StatesGroup):
    select_habit = State()
    name = State()
    time = State()
    days = State()
    reminders = State()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def get_db_pool():
    return await asyncpg.create_pool(DB_URL)

def get_days_keyboard(selected_days: Set[str] = None) -> InlineKeyboardMarkup:
    if selected_days is None:
        selected_days = set()
    
    buttons = []
    row = []
    
    for code, day in WEEK_DAYS.items():
        if code == 'everyday':
            continue
        
        emoji = "‚úÖ" if code in selected_days else ""
        row.append(InlineKeyboardButton(
            text=f"{emoji}{day[:3]}",
            callback_data=f"day_{code}"
        ))
        
        if len(row) == 4:
            buttons.append(row)
            row = []
    
    if row:
        buttons.append(row)
    
    buttons.append([
        InlineKeyboardButton(
            text="‚úÖ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å" if 'everyday' in selected_days else "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å",
            callback_data="day_everyday"
        )
    ])
    
    buttons.append([
        InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="days_done")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_reminders_keyboard(selected_reminders: Set[str] = None) -> InlineKeyboardMarkup:
    if selected_reminders is None:
        selected_reminders = set()
    
    buttons = []
    
    for code, text in REMINDER_OPTIONS.items():
        emoji = "‚úÖ" if code in selected_reminders else ""
        buttons.append([
            InlineKeyboardButton(
                text=f"{emoji}{text}",
                callback_data=f"reminder_{code}"
            )
        ])
    
    buttons.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="reminders_back"),
        InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="reminders_done")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def calculate_reminder_time(day_code: str, habit_time: str) -> datetime:
    days_map = {"mon": 0, "tue": 1, "wed": 2, "thu": 3, "fri": 4, "sat": 5, "sun": 6}
    hour, minute = map(int, habit_time.split(":"))
    today = datetime.now().weekday()
    target_day = days_map[day_code]
    delta = (target_day - today) % 7
    reminder_date = datetime.now() + timedelta(days=delta)
    return reminder_date.replace(hour=hour, minute=minute)

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π —Ç—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫.\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –Ω–∏—Ö.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )

@dp.message(Command("help"))
async def cmd_help(message: Message):
    commands = [
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É",
        "/addhabit - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É",
        "/myhabits - –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏",
        "/edithabit - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É",
        "/daily - –ü—Ä–∏–≤—ã—á–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
        "/weekly_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é",
        "/backup - –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–∞–Ω–Ω—ã—Ö",
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        "/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    ]
    await message.answer("üõ† <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n" + "\n".join(commands))

@dp.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("üîπ –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.")
    else:
        await state.clear()
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# --- –ü—Ä–∏–≤—ã—á–∫–∏ ---
@dp.message(Command("addhabit"))
async def cmd_addhabit(message: Message, state: FSMContext):
    await message.answer("–ö–∞–∫—É—é –ø—Ä–∏–≤—ã—á–∫—É —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å?")
    await state.set_state(AddHabit.name)

@dp.message(AddHabit.name)
async def process_name(message: Message, state: FSMContext, pool: asyncpg.Pool):
    existing = await pool.fetchrow(
        "SELECT 1 FROM habits WHERE user_id = $1 AND name = $2",
        message.from_user.id, message.text
    )
    if existing:
        await message.answer("‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return
    
    await state.update_data(habit_name=message.text)
    await message.answer("–í–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00)")
    await state.set_state(AddHabit.time)

@dp.message(AddHabit.time)
async def process_time(message: Message, state: FSMContext):
    try:
        hour, minute = map(int, message.text.split(':'))
        dtime(hour=hour, minute=minute)
        
        await state.update_data(time=message.text)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏:",
            reply_markup=get_days_keyboard()
        )
        await state.set_state(AddHabit.days)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")

@dp.callback_query(AddHabit.days, F.data.startswith("day_"))
async def process_days(callback: CallbackQuery, state: FSMContext):
    day_code = callback.data.split('_')[1]
    data = await state.get_data()
    
    if 'days' not in data:
        data['days'] = set()
    
    if day_code == 'everyday':
        data['days'] = set(WEEK_DAYS.keys()) - {'everyday'}
    elif day_code in data['days']:
        data['days'].remove(day_code)
    else:
        data['days'].add(day_code)
    
    await state.update_data(days=data['days'])
    await callback.message.edit_reply_markup(reply_markup=get_days_keyboard(data['days']))
    await callback.answer()

@dp.callback_query(AddHabit.days, F.data == "days_done")
async def process_days_done(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    if not data.get('days'):
        await callback.answer("‚ùå –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å")
        return
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=get_reminders_keyboard()
    )
    await state.set_state(AddHabit.reminders)
    await callback.answer()

@dp.callback_query(AddHabit.reminders, F.data.startswith("reminder_"))
async def process_reminders(callback: CallbackQuery, state: FSMContext):
    reminder_code = callback.data.split('_')[1]
    data = await state.get_data()
    
    if 'reminders' not in data:
        data['reminders'] = set()
    
    if reminder_code == 'none':
        data['reminders'] = set()
    elif reminder_code in data['reminders']:
        data['reminders'].remove(reminder_code)
    else:
        data['reminders'].add(reminder_code)
    
    await state.update_data(reminders=data['reminders'])
    await callback.message.edit_reply_markup(reply_markup=get_reminders_keyboard(data['reminders']))
    await callback.answer()

@dp.callback_query(AddHabit.reminders, F.data == "reminders_back")
async def process_reminders_back(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏:",
        reply_markup=get_days_keyboard(data.get('days', set()))
    )
    await state.set_state(AddHabit.days)
    await callback.answer()

@dp.callback_query(AddHabit.reminders, F.data == "reminders_done")
async def process_reminders_done(callback: CallbackQuery, state: FSMContext, pool: asyncpg.Pool):
    data = await state.get_data()
    habit_name = data['habit_name']
    time_str = data['time']
    days = data.get('days', set())
    reminders = data.get('reminders', set())
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤—ã—á–∫—É –≤ –ë–î
        habit_id = await pool.fetchval(
            """INSERT INTO habits (user_id, name, time, days, reminders)
               VALUES ($1, $2, $3, $4, $5) RETURNING habit_id""",
            callback.from_user.id, habit_name, time_str, json.dumps(list(days)), json.dumps(list(reminders))
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        hour, minute = map(int, time_str.split(':'))
        
        for day in days:
            if day == 'everyday':
                continue
                
            # –û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            scheduler.add_job(
                send_reminder,
                'cron',
                day_of_week=day[:3],
                hour=hour,
                minute=minute,
                args=[callback.message.chat.id, habit_name, habit_id, pool],
                id=f"{habit_id}_{day}_main",
                replace_existing=True
            )
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            for reminder in reminders:
                if reminder == '1h' and hour > 0:
                    scheduler.add_job(
                        send_reminder,
                        'cron',
                        day_of_week=day[:3],
                        hour=hour-1,
                        minute=minute,
                        args=[callback.message.chat.id, f"–ß–µ—Ä–µ–∑ —á–∞—Å: {habit_name}", habit_id, pool],
                        id=f"{habit_id}_{day}_pre1h",
                        replace_existing=True
                    )
                elif reminder == '3h' and hour > 2:
                    scheduler.add_job(
                        send_reminder,
                        'cron',
                        day_of_week=day[:3],
                        hour=hour-3,
                        minute=minute,
                        args=[callback.message.chat.id, f"–ß–µ—Ä–µ–∑ 3 —á–∞—Å–∞: {habit_name}", habit_id, pool],
                        id=f"{habit_id}_{day}_pre3h",
                        replace_existing=True
                    )
                elif reminder == '1d':
                    reminder_time = calculate_reminder_time(day, time_str) - timedelta(days=1)
                    scheduler.add_job(
                        send_reminder,
                        'date',
                        run_date=reminder_time,
                        args=[callback.message.chat.id, f"–ó–∞–≤—Ç—Ä–∞ –≤ {time_str}: {habit_name}", habit_id, pool],
                        id=f"{habit_id}_{day}_pre1d",
                        replace_existing=True
                    )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–µ
        selected_days = sorted([WEEK_DAYS[d] for d in days])
        selected_reminders = [REMINDER_OPTIONS[r] for r in reminders]
        
        message_text = (
            f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ <b>{habit_name}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
            f"üïò –í—Ä–µ–º—è: <b>{time_str}</b>\n"
            f"üìÖ –î–Ω–∏: {', '.join(selected_days)}"
        )
        
        if selected_reminders:
            message_text += f"\nüîî –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å: {', '.join(selected_reminders)}"
        
        await callback.message.answer(message_text)
        await state.clear()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏")
        await state.clear()
    
    await callback.answer()

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏ ---
@dp.message(Command("myhabits"))
async def cmd_myhabits(message: Message, pool: asyncpg.Pool):
    habits = await pool.fetch("SELECT * FROM habits WHERE user_id = $1", message.from_user.id)
    if not habits:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ /addhabit!")
        return
    
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for habit in habits:
        kb.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"üóë {habit['name']} ({habit['time']})",
                callback_data=f"delete_{habit['habit_id']}"
            ),
            InlineKeyboardButton(
                text=f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                callback_data=f"edit_{habit['habit_id']}"
            )
        ])
    
    await message.answer("üìã –í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏:", reply_markup=kb)

@dp.callback_query(F.data.startswith("delete_"))
async def delete_habit(callback: CallbackQuery, pool: asyncpg.Pool):
    habit_id = int(callback.data.split("_")[1])
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
    await pool.execute("DELETE FROM habits WHERE habit_id = $1", habit_id)
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    for job in scheduler.get_jobs():
        if str(habit_id) in job.id:
            scheduler.remove_job(job.id)
    
    await callback.message.edit_text("‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ –∏ –≤—Å–µ –µ—ë –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã!")

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫ ---
@dp.message(Command("edithabit"))
async def cmd_edithabit(message: Message, state: FSMContext, pool: asyncpg.Pool):
    habits = await pool.fetch("SELECT * FROM habits WHERE user_id = $1", message.from_user.id)
    if not habits:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for habit in habits:
        kb.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"{habit['name']} ({habit['time']})",
                callback_data=f"edit_select_{habit['habit_id']}"
            )
        ])
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)
    await state.set_state(EditHabit.select_habit)

@dp.callback_query(EditHabit.select_habit, F.data.startswith("edit_select_"))
async def select_habit_to_edit(callback: CallbackQuery, state: FSMContext, pool: asyncpg.Pool):
    habit_id = int(callback.data.split("_")[2])
    habit = await pool.fetchrow("SELECT * FROM habits WHERE habit_id = $1", habit_id)
    
    await state.update_data(
        habit_id=habit_id,
        current_name=habit['name'],
        current_time=habit['time'],
        current_days=json.loads(habit['days']),
        current_reminders=json.loads(habit['reminders'] or '[]')
    )
    
    await callback.message.answer(
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {habit['name']}\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ):"
    )
    await state.set_state(EditHabit.name)
    await callback.answer()

@dp.message(EditHabit.name)
async def edit_habit_name(message: Message, state: FSMContext):
    new_name = message.text if message.text != "-" else None
    await state.update_data(new_name=new_name)
    
    data = await state.get_data()
    await message.answer(
        f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {data['current_time']}\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00) –∏–ª–∏ '-' —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:"
    )
    await state.set_state(EditHabit.time)

@dp.message(EditHabit.time)
async def edit_habit_time(message: Message, state: FSMContext):
    if message.text != "-":
        try:
            hour, minute = map(int, message.text.split(':'))
            dtime(hour=hour, minute=minute)
            new_time = message.text
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
            return
    else:
        new_time = None
    
    await state.update_data(new_time=new_time)
    data = await state.get_data()
    
    await message.answer(
        "–¢–µ–∫—É—â–∏–µ –¥–Ω–∏: " + ", ".join([WEEK_DAYS[d] for d in data['current_days']]) + "\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–Ω–∏:",
        reply_markup=get_days_keyboard(set(data['current_days']))
    )
    await state.set_state(EditHabit.days)

@dp.callback_query(EditHabit.days, F.data.startswith("day_"))
async def edit_habit_days(callback: CallbackQuery, state: FSMContext):
    day_code = callback.data.split('_')[1]
    data = await state.get_data()
    
    if 'new_days' not in data:
        data['new_days'] = set(data['current_days'])
    
    if day_code == 'everyday':
        data['new_days'] = set(WEEK_DAYS.keys()) - {'everyday'}
    elif day_code in data['new_days']:
        data['new_days'].remove(day_code)
    else:
        data['new_days'].add(day_code)
    
    await state.update_data(new_days=data['new_days'])
    await callback.message.edit_reply_markup(reply_markup=get_days_keyboard(data['new_days']))
    await callback.answer()

@dp.callback_query(EditHabit.days, F.data == "days_done")
async def edit_habit_days_done(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    if not data.get('new_days'):
        await callback.answer("‚ùå –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å")
        return
    
    await callback.message.edit_text(
        "–¢–µ–∫—É—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: " + ", ".join([REMINDER_OPTIONS[r] for r in data['current_reminders']]) + "\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=get_reminders_keyboard(set(data['current_reminders']))
    )
    await state.set_state(EditHabit.reminders)
    await callback.answer()

@dp.callback_query(EditHabit.reminders, F.data.startswith("reminder_"))
async def edit_habit_reminders(callback: CallbackQuery, state: FSMContext):
    reminder_code = callback.data.split('_')[1]
    data = await state.get_data()
    
    if 'new_reminders' not in data:
        data['new_reminders'] = set(data['current_reminders'])
    
    if reminder_code == 'none':
        data['new_reminders'] = set()
    elif reminder_code in data['new_reminders']:
        data['new_reminders'].remove(reminder_code)
    else:
        data['new_reminders'].add(reminder_code)
    
    await state.update_data(new_reminders=data['new_reminders'])
    await callback.message.edit_reply_markup(reply_markup=get_reminders_keyboard(data['new_reminders']))
    await callback.answer()

@dp.callback_query(EditHabit.reminders, F.data == "reminders_done")
async def edit_habit_finish(callback: CallbackQuery, state: FSMContext, pool: asyncpg.Pool):
    data = await state.get_data()
    habit_id = data['habit_id']
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    updates = {
        "name": data.get('new_name') or data['current_name'],
        "time": data.get('new_time') or data['current_time'],
        "days": json.dumps(list(data.get('new_days') or data['current_days'])),
        "reminders": json.dumps(list(data.get('new_reminders') or data['current_reminders']))
    }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
    await pool.execute(
        """UPDATE habits SET
           name = $1, time = $2, days = $3, reminders = $4
           WHERE habit_id = $5""",
        updates['name'], updates['time'], updates['days'], updates['reminders'], habit_id
    )
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    for job in scheduler.get_jobs():
        if str(habit_id) in job.id:
            scheduler.remove_job(job.id)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    hour, minute = map(int, updates['time'].split(':'))
    days = json.loads(updates['days'])
    reminders = json.loads(updates['reminders'])
    
    for day in days:
        if day == 'everyday':
            continue
            
        scheduler.add_job(
            send_reminder,
            'cron',
            day_of_week=day[:3],
            hour=hour,
            minute=minute,
            args=[callback.message.chat.id, updates['name'], habit_id, pool],
            id=f"{habit_id}_{day}_main",
            replace_existing=True
        )
        
        for reminder in reminders:
            if reminder == '1h' and hour > 0:
                scheduler.add_job(
                    send_reminder,
                    'cron',
                    day_of_week=day[:3],
                    hour=hour-1,
                    minute=minute,
                    args=[callback.message.chat.id, f"–ß–µ—Ä–µ–∑ —á–∞—Å: {updates['name']}", habit_id, pool],
                    id=f"{habit_id}_{day}_pre1h",
                    replace_existing=True
                )
            elif reminder == '3h' and hour > 2:
                scheduler.add_job(
                    send_reminder,
                    'cron',
                    day_of_week=day[:3],
                    hour=hour-3,
                    minute=minute,
                    args=[callback.message.chat.id, f"–ß–µ—Ä–µ–∑ 3 —á–∞—Å–∞: {updates['name']}", habit_id, pool],
                    id=f"{habit_id}_{day}_pre3h",
                    replace_existing=True
                )
            elif reminder == '1d':
                reminder_time = calculate_reminder_time(day, updates['time']) - timedelta(days=1)
                scheduler.add_job(
                    send_reminder,
                    'date',
                    run_date=reminder_time,
                    args=[callback.message.chat.id, f"–ó–∞–≤—Ç—Ä–∞ –≤ {updates['time']}: {updates['name']}", habit_id, pool],
                    id=f"{habit_id}_{day}_pre1d",
                    replace_existing=True
                )
    
    await callback.message.answer("‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    await state.clear()
    await callback.answer()

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
async def send_reminder(chat_id: int, habit: str, habit_id: int, pool: asyncpg.Pool):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ —Å–µ–≥–æ–¥–Ω—è
    completed = await pool.fetchval(
        "SELECT 1 FROM habit_completions WHERE habit_id = $1 AND date = $2",
        habit_id, datetime.now().date()
    )
    
    if not completed:
        kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{habit_id}")
        ]])
        await bot.send_message(chat_id, f"üîî {habit}", reply_markup=kb)

@dp.callback_query(F.data.startswith("done_"))
async def mark_habit_done(callback: CallbackQuery, pool: asyncpg.Pool):
    habit_id = int(callback.data.split("_")[1])
    await pool.execute("""
        INSERT INTO habit_completions (habit_id, date, completed)
        VALUES ($1, $2, TRUE)
        ON CONFLICT (habit_id, date) DO UPDATE SET completed = TRUE
    """, habit_id, datetime.now().date())
    await callback.message.edit_text("üëç –ü—Ä–∏–≤—ã—á–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
@dp.message(Command("stats"))
async def cmd_stats(message: Message, pool: asyncpg.Pool):
    stats = await pool.fetchrow("""
        SELECT 
            COUNT(*) as total_habits,
            SUM(CASE WHEN completed THEN 1 ELSE 0 END) as completed
        FROM habit_completions
        JOIN habits ON habits.habit_id = habit_completions.habit_id
        WHERE habits.user_id = $1
    """, message.from_user.id)

    completion_rate = (stats["completed"] / stats["total_habits"] * 100) if stats["total_habits"] > 0 else 0
    await message.answer(
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–≤—ã—á–µ–∫: {stats['total_habits']}\n"
        f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed']}\n"
        f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {completion_rate:.1f}%"
    )

@dp.message(Command("weekly_stats"))
async def cmd_weekly_stats(message: Message, pool: asyncpg.Pool):
    stats = await pool.fetch("""
        SELECT 
            date_trunc('day', date) as day,
            COUNT(*) as total,
            SUM(CASE WHEN completed THEN 1 ELSE 0 END) as completed
        FROM habit_completions
        JOIN habits ON habits.habit_id = habit_completions.habit_id
        WHERE habits.user_id = $1
        AND date >= now() - interval '7 days'
        GROUP BY day
        ORDER BY day
    """, message.from_user.id)
    
    if not stats:
        await message.answer("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.")
        return
    
    text = "üìà –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n"
    for day in stats:
        percent = (day['completed'] / day['total'] * 100) if day['total'] > 0 else 0
        text += f"{day['day'].strftime('%d.%m')}: {day['completed']}/{day['total']} ({percent:.0f}%)\n"
    
    await message.answer(text)

@dp.message(Command("daily"))
async def cmd_daily(message: Message, pool: asyncpg.Pool):
    today = datetime.now().strftime("%a").lower()[:3]
    habits = await pool.fetch("""
        SELECT * FROM habits 
        WHERE user_id = $1 
        AND (days LIKE '%' || $2 || '%' OR days LIKE '%everyday%')
    """, message.from_user.id, today)
    
    if not habits:
        await message.answer("–°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫! üéâ")
        return
    
    text = "üìÖ –°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:\n\n"
    for habit in habits:
        text += f"‚Ä¢ {habit['time']} ‚Äî {habit['name']}\n"
    
    await message.answer(text)

# --- –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ ---
@dp.message(Command("backup"))
async def cmd_backup(message: Message, pool: asyncpg.Pool):
    habits = await pool.fetch("SELECT * FROM habits WHERE user_id = $1", message.from_user.id)
    completions = await pool.fetch("""
        SELECT * FROM habit_completions
        JOIN habits ON habits.habit_id = habit_completions.habit_id
        WHERE habits.user_id = $1
    """, message.from_user.id)
    
    backup_data = {
        "habits": [dict(h) for h in habits],
        "completions": [dict(c) for c in completions]
    }
    
    filename = f"backup_{message.from_user.id}_{datetime.now().strftime('%Y%m%d_%H%M')}.json"
    with open(filename, 'w') as f:
        json.dump(backup_data, f, ensure_ascii=False, indent=2)
    
    with open(filename, 'rb') as f:
        await message.answer_document(f, caption="–í–∞—à–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è")
    
    import os
    os.remove(filename)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def on_startup():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

async def on_shutdown():
    logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    pool = await get_db_pool()
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    scheduler.start()
    await dp.start_polling(bot, pool=pool)

if __name__ == "__main__":
    asyncio.run(main())